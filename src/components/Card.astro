---
interface Props {
	title: string;
	brand: string;
	url: string;
	token: string;
	status: boolean;
}

const getStatusColor = (status: boolean) => {
	if(status){
		return 'bg-green-500'
	}
	return 'bg-red-500 animate-pulse'
};


let { title , brand ,status, url, token} = Astro.props;
---

<li class="rounded-lg bg-slate-600 p-3 text-slate-100 hover:scale-[1.03]">
	<button class="w-full text-left" data-url={url} data-token={token} data-status={status}>
		<div class="flex flex-row items-center justify-between">
			<figure class="w-10 h-10 mr-2">
				<img class="min-w-7" src={`logo-${brand}.webp`} alt="">
			</figure>
			<p class="">
				{title}
			</p>
			<span class={`status-indicator w-4 h-4 rounded-full ml-4 ${getStatusColor(status)}`}>	    
		</div>
	</button>
</li>

<script>
const changeStatus = async (url: string, token: string) => {
	const response = await fetch(url, {
			method: 'PUT',
			headers:{
				'X-Auth-Token': token
			},
			body: JSON.stringify({ "is_active": true })
		})

		const { data } = await response.json()
		return data.is_active
}


document.addEventListener('DOMContentLoaded', () => {
	const buttons = document.querySelectorAll('button[data-url][data-token]');
	buttons.forEach(button => {
		button.addEventListener('click', async () => {
			const url = button.getAttribute('data-url') || '';
			const token = button.getAttribute('data-token') || '';
			const status = await changeStatus(url, token);

        // Actualizar el estado del `span` correspondiente
        const span = button.querySelector('.status-indicator');
        if (span) {
          span.className = `status-indicator w-4 h-4 rounded-full ml-4 ${status ? 'bg-green-500' : 'bg-red-500 animate-pulse'}`;
        }

        // Actualizar el atributo `data-status` del bot√≥n
        button.setAttribute('data-status', status);
        
        // Mostrar en consola el cambio de estado
        console.log(`Status changed to: ${status}`);
		});
	});
});

</script>