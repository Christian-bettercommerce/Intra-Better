---
import Card from '../components/Card.astro';
import webhooks from '../../webhooks.json';

interface Webhook {
  id: number;
  brand: string;
  name: string;
}

interface Webhooks {
  [key: string]: Webhook[];
}

const typedWebhooks: Webhooks = webhooks as Webhooks;

const sectionsPromise = Object.keys(webhooks).map(async (key) => {
  const key_store = `PUBLIC_STORE_${key}`
  const env_store = import.meta.env[key_store]

  const hooks = await Promise.all(typedWebhooks[key].map(async e => {
    const key_token = `PUBLIC_${key}_${e.brand}`
    const env_token = import.meta.env[key_token]
    const url = `https://api.bigcommerce.com/stores/${env_store}/v3/hooks/${e.id}`
    const response = await fetch(url, {
      method: 'GET',
      headers:{
        'X-Auth-Token': env_token
      }
    })

    const { data } = await response.json()
    return { url, brand: e.brand, token: env_token, name: e.name, status: data?.is_active}
  }))

  return { key, hooks };
});

const sections = await Promise.all(sectionsPromise);

---

<main>
  {
    sections.map(({ key, hooks }) => (
      <section class="p-4 place-content-center">
        <h1 class="text-3xl p-4 font-extrabold text-slate-900">{`Webhooks ${key}`}</h1>
        <ul role="list" class="grid grid-cols-1 md:grid-cols-4 gap-5">
          {
            hooks.map(e => (
              <Card
                title={e.name}
                brand={e.brand}
                url={e.url}
                token={e.token}
                status={e.status}
              />
            ))
          }
        </ul>
      </section>
    ))
  }
</main>
